{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EchoTherm Documentation","text":"<p>Welcome to the EchoMAV Technical Library for the EchoTherm system.</p> <ul> <li> Overview</li> <li> Quick Start</li> <li> Hardware Guide</li> <li> Software Guide</li> <li> User Guide</li> <li> Pinouts</li> <li> Mechanical</li> </ul>"},{"location":"electrical/","title":"Pinouts and Connectors","text":"<p>The PWR LED on the left side indicates that the system is powered and running. The STATUS LED is an RGB output indicating the status of the autopilot. Please refer to the autopilot firmware documentation for the meaning of the STATUS LED, e.g. ArduRover RGB LED documentation. Both LEDs can be deactivated by changing the position of a DIP switch located inside the case. </p> <p> Connector Pins Type Part Number Mating Cable Assembly Notes PWR 4 M12, A-Code Male T4140012041-000 Tensility 10-03805 13-36VDC, 4A + supply PWM 12 M12, A-Code Female T4141012121-000 Custom INS 8 M12, A-Code Female T4141012081-000 Custom IRIDIUM 12 M12, A-Code Female T4141012121-000 Custom FMU CAN 4 M12, A-Code Female T4141012041-000 Custom NMEA2K 5 M12, A-Code Female T4141012051-000 Custom ANALOG IN 5 M12, D-Code Female T4141512051-000 Custom <p></p> <p></p> <p>Note</p> <p>Serial Number 0001 hardware uses different USB pinout, please contact EchoMAV if using Serial Number 0001.</p> <p> Connector Pins Type Part Number Mating Cable Assembly Notes ETH 4 M12, D-Code Female T4141512041-000 ASI-M12-RJ45-11101 100 Mbps Ethernet to Jetson ETH 4 M12, D-Code Female T4141512041-000 ASI-M12-RJ45-11101 100 Mbps Ethernet to Jetson USB 12 M12, A-Code Female T4141012121-000 Custom USB 3 SS to Jetson USB 12 M12, A-Code Female T4141012121-000 Custom USB 3 SS to Jetson <p></p> <p></p> <p> Connector Type Part Number Notes H-1 SMA CABLE 385 RF-150-A-2 Mosaic H, Channel 1 H-2 SMA CABLE 385 RF-150-A-2 Mosaic H, Channel 2 X5 SMA CABLE 385 RF-150-A-2 Mosaic X5 CELL1 SMA CABLE 385 RF-150-A-2 Cellular 1 CELL2 SMA CABLE 385 RF-150-A-2 Cellular 2 <p></p>"},{"location":"hardware/","title":"Hardware Guide","text":"<p>The EchoTherm system uses the EchoMAV EchoPilot AI combined with a customized carrier board.</p> <p>To fill in gaps not covered in this documentation, please cross reference the EchoPilot AI Documentation. </p> <p>The flow chart below shows the overall hardware architecture. The custom carrier board described below mates to the EchoPilotAI's board to board connectors, and provided EchoTherm-specific functionality. Specifically, the EchoTherm carrier board provides two Septentrio GNSS units, a RS-422 level shifter for an external INS system, two FTDI serial converters, power subsystems and connectors not found on EchoMAV's standard commercial carrier board. The system also includes a ruggedize aluminum enclosure, passive heat dissipation, IP67-design, and industrial M12 connectors.</p> <p></p> <p></p>"},{"location":"hardware/#carrier-board-schematic","title":"Carrier Board Schematic","text":"<p>The EchoTherm Carrier Board Schematic is available to download. </p>"},{"location":"hardware/#fmu-ports","title":"FMU Ports","text":"<p>The Autopilot system (also referred to as Flight Management Unit (FMU)) is based on the open-hardware Pixhawk design running an STM32H743 microcontroller. The peripherals for this device are connected via I2C, SPI, CAN and UART ports. The table below identifies how each peripheral interfaces is used.</p> Port Use Connector Assignement USART1 GPS1 Mosaic X5 GPS (serial port 1, pins B1/D1) USART2 GPS2 Mosaic H (serial port 1, pins B1/D1) USART3 Telemetry to Jetson (Telem2) NA (internally routed) UART4 External INS1 (RS-422 shifted) External INS connector USART5 Not Used NA USART6 Remote ID NA (internal) UART7 External/User (Debug) EchoPilot J12 UART8 IO MCU NA (internal) SPI1 ICM42688P IMU #1 and #2 NA (internal) SPI2 RM3100 Compass and FRAM NA (internal) SPI3 Not Used NA SPI4 ICM42688P IMU #3 and MS5611 Baro #1 NA (internal) SPI5 Not Used NA SPI6 MS5611 Baro #2 NA (internal) I2C1 External RGB LED I2C2 Internal (Spare) Carrier Board J13 I2C3 Not Used NA I2C4 Not Used NA"},{"location":"hardware/#fmu-uart-order","title":"FMU UART Order","text":"<p>The default UART order for use for autopilot firmware is provided below. The port name is important, as you will use this name within ArduPilot to set up parameters associated with each port. e.g. <code>SERIAL1_PROTOCOL</code>.</p> Port Name Function Port Connector SERIAL0 Console USB EchoPilot J7 SERIAL1 GPS1 USART2 None (to Mosaic H) SERIAL2 Telem2 USART3 None (internally routed to Jetson) SERIAL3 GPS2 USART1 None (to Mosaic X5) SERIAL4 External INS (RS-232 shifted) UART4 Carrier Board J32 SERIAL5 Onboard Remote ID USART6 NA SERIAL6 Debug UART7 EchoPilot J12 <p>Please reference the EchoPilot AI's BSP firmware-specific board definition files for additional details related to board setup.</p>"},{"location":"hardware/#can","title":"CAN","text":"<p>2 CAN ports from the autopilot (STM32H743) are exposed, one on the CAN connector, another on an internal (spare) connector (J14) on the carrier board. Please refer to ArduPilot CAN Bus Setup for information about DroneCAN setup.</p> <p>1 CAN port from the Jetson is routed to the external NMEA2K connector. </p> <p>Note</p> <p>To enable CAN on the Jetson, modify <code>/etc/modprobe.d/denylist-mttcan.conf</code> and ensure the line <code>blacklist mttcan</code> is commented out. Reboot, then log in again and run <code>sudo modprobe mttcan</code>.</p>"},{"location":"hardware/#termination","title":"Termination","text":"<p>The two (2) CAN connections from the FMU (FMU CAN1 and FUM CAN2) and the one (1) from the Jetson are driven by LTC2875 transceivers and contain termination resistors at the drivers on the EchoPilot AI board inside the EchoTherm enclosure. Should you desire to remove these termination resistors (e.g., you want to place the system in the middle of a CAN chain rather than at the end), refer to the following resistor locations:  </p> CAN Resistor Label Notes FMU CAN1 R19 Near U4 and U45, size 0402 FMU CAN2 R9 Near U3, size 0402 JETSON CAN1 R95 Near U32, size 0402"},{"location":"hardware/#septentrio-gnss-units","title":"Septentrio GNSS Units","text":"<p>The EchoTherm system contains two Septentrio GNSS systems (X-5 and H). The table below summarizes the connections available to each.</p> GNSS Port Connection Mosaic X5 COM 1 (B1/D1) Autopilot SERIAL3 (115 kpbs) Mosaic X5 COM 2 (F1/H1) Jetson via USB FTDI (e.g. /dev/ttyUSBx) Mosaic X5 USB USB-C port inside enclosure Mosaic H COM 1 (B1/D1) Autopilot SERIAL1 (115 kpbs) Mosaic H COM 2 (F1/H1) Jetson via USB FTDI (e.g. /dev/ttyUSBx) Mosaic H USB USB-C port inside enclosure <p>Please refer to the schematic for more information.</p>"},{"location":"mechanical/","title":"Mechanical","text":""},{"location":"mechanical/#2d-drawing","title":"2D Drawing","text":"<p>Download 2D Drawing Here</p>"},{"location":"mechanical/#step-files","title":"STEP Files","text":"<p>Download STEP File Here</p>"},{"location":"mechanical/#vibration-isolation","title":"Vibration Isolation","text":"<p>When used in high-g or high-vibration environments, we recommend the use of vibration-damping mounts, consisting of McMaster Carr parts 93849A202 (washer) and 60525K21 (vibration-damping mount). Please refer to the image below for installation.</p> <p></p>"},{"location":"overview/","title":"EchoTherm Overview","text":"<p>The EchoTherm system offers advanced capabilities for unmanned systems (PX4 and Ardupilot compatible autopilot) combined with embedded computer power (Jetson Orin) and dual/redundant Septentrio H and X5 GNSS systems. The system is packaged in a robust aluminum case which has been designed to IP67 standards. The EchoTherm system is based on the EchoMAV EchoPilot AI, please refer to the EchoPilot AI Documentation for information specific to that device.</p> <p></p>"},{"location":"overview/#system-diagramflowchart","title":"System Diagram/Flowchart","text":""},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>The goal of this quick start guide is to power the EchoTherm module and get a telemetry stream over the network to your host computer running either QGroundControl or Mission Planner. This process will get you familiar with the hardware, but is only touching the surface of what you can do with this system. </p> <p>We will be streaming telemetry over the network, so the first step is to configure your host computer so that is is compatible with the default networking settings of the EchoTherm system. To do so, we will be setting your host IP address to 10.223.1.10/16.</p> <p>Info</p> <p>By default, the EchoTherm system streams telemetry to 10.223.1.10:14550 using UDP. The instructions below will walk you through setting your host computer to this IP address and installing a Ground Control Software package.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>You will need a Ground Control Software (GCS) solution installed on your host computer. Either QGroundControl or Mission Planner are recommended. Note that Mission Planner is only available for Windows, while QGroundControl is available for most hardware including Android, Linux, Windows, Mac, etc. Before proceeding, install one. If you don't have a preference, we prefer QGroundControl as it is more user friendly. Although be aware some advanced features or set up may require Mission Planner. </p>"},{"location":"quickstart/#quick-start-steps","title":"Quick Start Steps","text":"<p>First configure your host computer to have an IP of 10.223.1.10/16 using the instructions below for Windows/Linux.</p> <p>Info</p> <p>On Windows: Open Device Manager (Windows Key + X \u2192 Press \"W\" \u2192 Click on \"Change adapter options\" \u2192 Right click, properties of the adapter connected to the EchoPilot AI \u2192 Highlight \"Internet Protocol Version 4 (TCP/IPv4) and click Properties ). Select \"Use the following IP address\" and configure the IP address and Subnet mask as shown below. Then click OK \u2192 Close.  </p> <p></p> <p>On Linux:</p> <p>Command line instructions are provided below. Modern flavors of Linux (e.g. Ubuntu) will provide a user interface to change the IP address, which you are free to use if you know how to do so.</p> <p>Using a terminal window, find the wired interface name, most typically this can be found using: <pre><code>$ ip ad\nenp43s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 1000\nlink/ether 34:73:5a:e8:57:3f brd ff:ff:ff:ff:ff:ff\n</code></pre> In the response above, the interface name is <code>enp43s0</code>. Use <code>nmcli</code> and the interface name found above set the static IP address to 10.223.1.10/16:  <pre><code>$ nmcli con add con-name \"static-eth\" ifname enp43s0 type ethernet ip4 10.223.1.10/16\n$ nmcli con up \"static-eth\"\n</code></pre> Now take down the other connections, for example a connection <code>enp43s0</code> is shown below: <pre><code>$ nmcli con show\nNAME         UUID                 TYPE           DEVICE\nenp43s0      ff9804db5-........   802-3-ethernet --\nstatic-eth   a4b59cb4a-........   802-3-ethernet ens32\n\n$ nmcli con down enp43s0\n</code></pre></p> <ol> <li>Plug in an RJ45 to M12 cable assembly between the EchoTherm system and your host computer (use either ETH port).</li> <li>Power on the EchoTherm system using a 13-36VDC power supply and M12 power cable assembly provided (ensure the power source can supply 4A). The green PWR LED should light up.</li> <li>Open your GCS application on the host computer. If a firewall warning is provided, ensure you accept the connection.</li> <li>Once the EchoTherm system is booted (approximately 60s), telemetry will start to flow from the EchoTherm system to 10.223.1.10:14550 via UDP. If you correctly followed the steps above, you should automatically get a connection over the network.</li> </ol> <p></p>"},{"location":"software/","title":"Software Configuration","text":""},{"location":"software/#default-installed-jetson-software","title":"Default Installed Jetson Software","text":"<p>From the factory, the autopilot system of each EchoTherm system is provisioned with ArduRover(Boat) (latest stable release), and the Jetson is flashed with Jetson L4T 35.4.1 (or later). Minimal open-source software is installed on the Jetson module as described below.</p> <ul> <li> <p>Cockpit</p> <p>Cockpit provides a web-based user interface which allows the user remote access into the system using any web browser. The access the system, from a host computer on the same network, browse to <code>https://IP_ADDRESS</code> where IP_ADDRESS is the IP Address of the EchoTherm system (see system label). Once logged into the web UI, there are many features including service monitoring, system settings and a web-based terminal.</p> </li> <li> <p>Mavlink-router</p> <p>Mavlink-router is an open source tool used to receive telemetry from the autopilot via a serial port and stream it to an IP endpoint (10.223.1.10:14550 over UDP by default). This software is open source and you are free to review the installation scripts or reinstall/remove the software. </p> <p>Default telemetry will stream to <code>10.223.1.10:14550</code> using UDP (client mode). This will allow automatic connection to common Ground Control Stations including QGroundControl and Mission Planner. For this to work, your host computer must be set to <code>10.223.1.10</code> and the EchoPilot AI must have a network connection between one of the Ethernet ports and the host computer. Once you get this basic telemetry set up working, then we suggest moving to your final desired telemetry configuration.</p> <p>The Cockpit web application has been set up to allow basic configuration changes to Mavlink-router including connection mode, endpoint IP and Port and the input serial port connected to the autopilot system. While we believe this will be sufficient for the majority of applications, Mavlink-router can be configured with much more complicated scenarios, in which case we recommend NOT using the webUI and rather editing <code>etc\\mavlink-router\\main.conf</code> directly. </p> </li> </ul>"},{"location":"software/#default-autopilot-software-and-configuration","title":"Default Autopilot Software and Configuration","text":"<p>By default, the EchoTherm system will come from the factory with ArduRover(Boat) installed and bench tested. The following important ArduPilot parameters are set to ensure connectivity to the Jetson and proper use of the Septentrio GNSS systems:</p> ArduPilot Parameter Value Description SERIAL2_PROTOCOL MAVLink2 The telemetry connection between the FMU and Jetson SERIAL2_BAUD 500 500,000 bps baud rate GPS_AUTO_CONFIG 0 (Disabled) Disables GPS Auto Configuration GPS_TYPE 10 (SBF) Sets GPS 1 type to SBF GPS_TYPE2 10 (SBF) Sets GPS 2 type to SBF SERIAL1_PROTOCOL 5 (GPS) Sets serial port 1 to use as GPS SERIAL1_BAUD 115 (115,200) Sets serial port 1 baud rate to 115,200 SERIAL3_PROTOCOL 5 (GPS) Sets serial port 3 to use as GPS SERIAL3_BAUD 115 (115,200) Sets serial port 3 baud rate to 115,200 <p>The hardware is compatible with other variants of ArduPilot (e.g. Plane, Sub, etc.) as well as the PX4 autopilot project. Instructions for how to flash other versions of firmware can be found at the links below:</p> <ul> <li>Flashing ArduPilot</li> <li>Flashing PX4</li> </ul> <p>If you flash PX4, the following parameters would need to be set to ensure connectivity to the Jetson:</p> <pre><code>MAV_1_CONFIG 102: Telem 2  ## Reboot after this change to expose additional parameters\nMAV_1_RATE: 0\nMAV_1_MODE 2: Onboard\nSER_TEL2_BAUD: 500000   ## Reboot after this change\n\n## other parameters will be needed for proper GNSS configuration. Please contact EchoMAV if you plan to use the EchoTherm system with PX4 firmware.\n</code></pre>"},{"location":"software/#telemetry-data-between-the-autopilot-and-the-jetson","title":"Telemetry data between the Autopilot and the Jetson","text":"<p>The autopilot has a high-speed serial interface between the FMU/STM32H7 and the Jetson SOM. The Jetson UART1 (pins 203, 205) is connected to the autopilot's USART3 (SERIAL2).</p> <p>On the Jetson side, UART1 is typically enumerated as <code>/dev/ttyTHS0</code>, although it could vary with different Jetson modules including <code>/dev/ttyTHS1</code> and <code>/dev/ttyTHS2</code>.</p> <p>For using the EchoPilot AI to route MAVLink data over a network, we pre-install and recommend MAVLink Router. By default, mavlink-router is configured to push telemetry via UDP to <code>10.223.1.10:14550</code></p> <p>Should you need or want to install this independently, EchoMAV has an open-source installer which makes it easy to install MAVLink Router and configure it as a service which starts at boot. Please refer to the our installer repo https://github.com/EchoMAV/mavlink-router for instructions. </p> <p>If you use the install repo above, please refer to the instructions there for configuration of the UART and destination IP address. Specifically edit <code>etc\\mavlink-router\\main.conf</code> with the appropriate settings.</p> <p>Warning</p> <p>If you manually configure mavlink-router by modifying <code>etc\\mavlink-router\\main.conf</code>, the default web user interface may show incorrect data related to telemetry settings, or may overwrite your desired settings if saved from the web-UI. If you are working with this file, you may choose to edit the cockpit files which control telemetry settings to match your needs, or remove this feature from the web UI completely. Please see associated files https://github.com/EchoMAV/echopilot_deploy/tree/master/ui/general.</p> <p>If you have permission issues accessing <code>/dev/ttyTHSX</code> on the Jetson, please disable <code>nvgetty</code> and ensure you are a member of the <code>dialout</code> group as shown below. <pre><code>sudo systemctl stop nvgetty\nsudo systemctl disable nvgetty\nsudo usermod -aG dialout $USER\n</code></pre></p> <p>Note</p> <p>Reboot to apply changes.</p>"},{"location":"software/#access-the-telemetry-stream-with-your-own-application","title":"Access the telemetry stream with your own application","text":"<p>If you wish to develop your own application to parse the vehicle's telemetry, you can disable mavlink-router using: <pre><code>sudo systemctl stop mavlink-router\nsudo systemctl disable mavlink-router\n</code></pre> At this point, you can install your own application, which opens <code>/dev/ttyTHS0</code> (on most Jetson systems) at 500,000 kbps and uses a mavlink parser library to parse the byte stream.</p>"},{"location":"software/#aditional-information-related-to-septentrio-gnss","title":"Aditional information related to Septentrio GNSS","text":"<p>The Septentrio X5 and H units must be configured to output an SBF stream on COM1 before they will work with ArduPilot. The instructions to do so are below:</p> <p>Warning</p> <p>It is recommended to apply the ArduPilot parameters defined above BEFORE configuring the Septentrio GNSS systems.</p> <p></p> <ol> <li>Apply power to the EchoTherm system, open the lid, and connect to the USB configuration port for the GNSS port you wish to configure (either the X-5 or the H).</li> <li>Many USB devices will enumerate, including one which should be a RNDIS network interface.</li> </ol> <p>Note</p> <p>On Windows, you will need to install the driver before the RNDIS network device will function. The installer is located in the <code>driver</code> folder which will be available in the mass storage device which will enumerate in the step above. On Linux (tested with Ubuntu 22.04 LTS) no drivers need to be installed.</p> <ol> <li>Open a web browser at 192.168.3.1 to access the Septentrio configuration UI.</li> <li>Go to the NMEA/SBF Out tab</li> <li>Select +New SBF Stream &gt; Serial Port &gt; COM1</li> <li>Set interval to 100ms.</li> <li>Check Position and Status categories</li> <li>Select Finish &gt; OK</li> <li>Navigate to the Admin tab &gt; Configurations</li> <li>Under Copy Configuration File set the Source: Current and Target: Boot and press OK. This will save the current configuration so it is applied again at the next boot.</li> </ol> <p>To ensure the settings were applied, we recommend power cycling, then reconnecting to the GNSS unit, navigate to NMEA/SBF Out tab and ensure the output you set up in the previous step has persisted across a power cycle.</p> <p>At this time, we recommend repeating the settings for COM2, configuring the stream type desired for software which may be running on the Jetson. However, it is more typical for software to ingest NMEA GLL and GSA messages so we recommend using these messages for the output on COM2 for both the X-5 and H.</p>"},{"location":"software/#using-the-septentrio-h-for-both-gnss-position-and-heading","title":"Using the Septentrio H for both GNSS position and heading.","text":"<p>The Septentrio Mosaic H is capable of calculating static heading if two antennas are used in the appropriate way. Please refer to the Mosaic-H manual for more innformation. To enable heading on the Mosaic H, you need to ensure that the AttEuler and AttCovEuler SBF messages are configured (see instructios above for setting up a SBF stream). Then the following parameters should be configured in ArduPilot:</p> ArduPilot Parameter Value Description AHRS_EKF_TYPE 3 Enable use for EKF3 EKF2_ENABLE 0 Disable EKF2 EKF3_ENABLE 1 Enable EKF3 EKF_MAG_CAL 2 (for ArduRover) Can be left at default value EK3_SRC1_YAW 2 or 3 Set to 2 if using GPS Heading only, or 3 if a compass(es) is also in the system GPS_TYPE 26 (SBF-Heading) Sets the GPS type to include heading GPS_MB1_OFS_X USER DEFINED X position of the base (primary) GPS antenna in body frame from the position of the 2nd antenna GPS_MB1_OFS_Y USER DEFINED Y position of the base (primary) GPS antenna in body frame from the position of the 2nd antenna. GPS_MB1_OFS_Z USER DEFINED Z position of the base (primary) GPS antenna in body frame from the position of the 2nd antenna <p>Please find information here for additional info about configuring Septentrio devices with ArduPilot. For additional information about the GPS_MB1_XXX_X parameters, please refer here.</p>"},{"location":"software/#unique-board-identifier","title":"Unique Board Identifier","text":"<p>Each EchoPilot AI includes an AT24CS01-STUM unique ID EEPROM attached to the Jetson I2C 1 port at address 0x58. This can be used to obtain a unique 128-bit identifier (serial number) for your board. </p> <p>Below is an example python script you can use to read this serial number.</p> <p>First install python3 wih smbus <pre><code>sudo apt-get install python3-smbus\n</code></pre> Create a new file <code>serial.py</code> with these contents: <pre><code>import smbus\nimport sys\n\n# usage, pass the i2c bus as the first argument, e.g. python3 serial_number 0\n\ni2c_ch = int(sys.argv[1]) \n\n# address on the I2C bus\ni2c_address = 0x58\n\n# Register address\nserial_num = 0x80\n\n# Read serial number register\ndef read_serial():\n\n    # Read the serial register, a 16 byte block\n    val = bus.read_i2c_block_data(i2c_address, serial_num, 16)    \n    return val\n\n# Initialize I2C (SMBus)\nbus = smbus.SMBus(i2c_ch)\n\ntry:\n    # Print out the serial number\n    print(bytes(read_serial()).hex())\n\nexcept:\n    pass\n</code></pre> You can then run the script using below, where the argument is the system's i2c bus. This may vary from different Jetson modules, but will most often by 0 or 1. <pre><code>sudo python3 serial.py 0\n</code></pre></p>"},{"location":"userguide/","title":"User Guide","text":""},{"location":"userguide/#accessing-the-jetson-console","title":"Accessing the Jetson console","text":"<p>Warning</p> <p>Do not run the Jetson SOM without a heat sink. The lid of the EchoTherm system is the primary heat sink, and running the Jetson with the lid off may result in shut down or throttling. If you need to run the system for a continued period of time with the lid removed, position a fan to move air over the heat spreader installed on the Jetson module.</p> <p>Open the lid of the EchoTherm system, to expose the inner electronics.  </p> <p>Note</p> <p>A thermal pad is positioned between a heat spreader on the Jetson and the EchoTherm system lid. Please ensure this is in position and undamaged after removing and replacing the lid.</p> <p>Attach a USB cable between your host computer and J15 (Console) on the EchoPilot AI Board. A USB-C right angle adapter may be useful. Such adapters are included with the hardware or can be obtained elsewhere. </p> <p>In step 2, your host computer should have enumerated a virtual comm port. You will now need to find the name of the port.</p> <p>Info</p> <p>On Windows: Open Device Manager (Start \u2192 Control Panel \u2192 Hardware and Sound \u2192 Device Manager) Look in the Device Manager list, open the category \"Ports\", and note the COM port added USB Serial Port (COM?) (e.g., COM10). On Linux: Run <code>dmesg -w</code> and then plug in unplug and replug in the USB cable. You should see the name of the device added, typically <code>FTDI USB Serial device converter now attached to ttyUSB?</code> (e.g., ttyUSB0). </p> <p>Use a terminal program to connect to the Jetson's console at 115200 baud, 8N1. </p> <p>Info</p> <p>On Windows: We recommend Putty or TeraTerm. On Linux: We recommend Picocom. Install with <code>sudo apt-get install picocom</code>. Use with <code>picocom /dev/ttyUSB? -b 115200</code>. To exit picocom, use <code>Ctrl-a Ctrl-x</code>.</p> <p>Power the EchoTherm System 13-36VDC source capable of supplying up to 4A.</p> <p>Warning</p> <p>If using a bench supply with over-current protection, we recommend turning it OFF. The boot process requires short bursts of high current and over-current protection on some supplies will result in a failed boot. In most cases, if the Jetson fails to boot it is due to a poor power supply.</p> <p>You should now see the boot messages in your console, and once boot is complete, you will see a login prompt.</p> <p>Note</p> <p>The default username is echopilot and the default password is echopilot</p> <p>Success</p> <p>At this point you are logged into the Jetson.</p>"},{"location":"userguide/#accessing-the-jetson-via-network","title":"Accessing the Jetson via network","text":"<p>The EchoTherm system has two 100Mbps Ethernet ports (ETH1 and ETH2). Upstream, these go to a network switch, so either one can be used to access the Jetson SOM. An M12 to RJ45 cable is required (e.g. ASI-M12-RJ45-11101)</p> <p>EchoMAV's standard provisioning sets the Jetson module to a static IP address provided on the label with the device. There is also an alias ip of 192.168.253.0 which can be used if you do not know the static IP. </p> <p>To gain console access to the Jetson over the network, use <code>ssh</code> from a terminal session on the host computer:</p> <pre><code>ssh echopilot@IP_ADDRESS    #IP_ADDRESS obtained from the label on the device\n</code></pre> <p>Note</p> <p>The default password is echopilot</p> <p>Note</p> <p>If the label is damaged, or the static IP has been inadvertently changes, you can use the configuration IP \"backdoor\" alias of 192.168.154.0/24 to access the system. Ensure your host system is in the 192.168.0.0/24 subnet (any valid IP address not equal to 192.168.154.0 will work). Please refer to the instructions above for how to change your host IP address.</p>"},{"location":"userguide/#ip-configuration","title":"IP Configuration","text":"<p>The EchoPilot AI will be labeled from the factory with a static IP address in the 10.223.0.0/16 subnet such as 10.223.134.126 (for example only). If you do not know the IP address, you may be able to access the system using the backdoor/alias IP of 192.168.154.0/24. </p> <p>During provisioning, the system's static IP address is calculated using the last two octets of the Jetson's <code>eth0</code> interface MAC address with a netmask of 255.255.0.0 (/16). For example, given the MAC address of 00:30:1A:4E:A4:3E, the last two octets 0xA4 and 0x3E are converted from hex to decimal and then assigned as the last two octets of the IP address. In this example, this MAC address would correspond to 10.223.164.62/16 because 0xA4 = 164 and 0x3E = 62. This IP address is printed on the label from the factory.</p>"},{"location":"userguide/#changing-the-ip-address","title":"Changing the IP Address","text":"<p>To change the Jetson's IP address, first gain console access via USB (internally in the box), then follow the steps below to change the configuration to either DHCP or a different static IP address. Making these changes when connected to the Jetson over the network will likely result in you losing your connection as the Ethernet interface goes up/down.</p>"},{"location":"userguide/#configuring-for-dhcp","title":"Configuring for DHCP","text":"<p>If you wish to use DHCP, follow the instructions below:</p> <p>Once logged in via the console, modify the existing static connection (e.g. \"static-eth0\") to be DHCP: <pre><code>sudo nmcli con mod static-eth0 ipv4.method auto\nsudo nmcli con mod static-eth0 ipv4.gateway \"\"\nsudo nmcli con mod static-eth0 ipv4.address \"\"\nsudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> If the network connection is plugged into a DHCP server, the system will now get an IP address. You can confirm with:  <pre><code>ip addr\n</code></pre></p>"},{"location":"userguide/#configuring-or-changing-the-static-ip-address","title":"Configuring or Changing the Static IP Address","text":"<p>If you do not have a DHCP server, or you wish to assign a static IP address to the Jetson, follow the instructions below.</p> <p>First gain console access via the USB connector. Once logged in via the console, delete the default connection, for example \"Wired connection 1\": <pre><code>sudo nmcli c delete \"Wired connection 1\"\n</code></pre> Set up a static connection called <code>static-eth0</code> with an IP of 10.223.1.10, a netmask of 255.255.0.0 and a gateway of 10.223.1.1. The values are just examples, please adjust to the desired settings for your network. <pre><code>sudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 10.223.1.10/16 gw4 10.223.1.1\n</code></pre> Bring up the new interface <pre><code>sudo nmcli c up static-eth0\n</code></pre> To verify network connectivity, ping another device on the network, or to verify internet connectivity, ping a Google DNS server: <pre><code>ping 8.8.8.8\n</code></pre></p>"},{"location":"userguide/#other-networkmanager-tips-and-tricks","title":"Other NetworkManager tips and tricks","text":"<p>Linux for Tegra uses networkmanager (<code>nmcli</code>) for its network interfaces. Below you will find a few commands for common network tasks. These examples are not intended for you to follow sequentially, these are common examples which will demonstrate most network configuration needs.</p> <p>Show connections:   <code>nmcli con show</code></p> <p>Example: Delete the default connection (\"Wired connection 1\") and set up a static connection called <code>static-eth0</code> with an IP of 172.20.1.100, a netmask of 255.255.0.0 and a gateway of 172.20.2.100:   <pre><code>sudo nmcli c delete \"Wired connection 1\"\nsudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 172.20.1.20/16 gw4 172.20.2.100\nsudo nmcli c up static-eth0\n</code></pre></p> <p>Example: Change IP address of <code>static-eth0</code> connection to <code>192.168.1.4</code> with a 255.255.0.0 (/16) netmask:   <pre><code>sudo nmcli con mod static-eth0 ipv4.address 192.168.1.1/16\n</code></pre></p> <p>Example: Change the gateway of <code>static-eth0</code> connection to <code>192.168.1.1</code>:   <pre><code>sudo nmcli con mod static-eth0 ipv4.gateway 192.168.1.1\n</code></pre></p> <p>Example: Change the DNS of <code>static-eth0</code> connection to <code>8.8.8.8</code>:      <pre><code>sudo nmcli con mod static-eth0 ipv4.dns \"8.8.8.8\"\n</code></pre></p> <p>Example: Take down/up of <code>static-eth0</code>:     <pre><code>sudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> Example: Delete the <code>static-eth0</code> connection:   <pre><code>sudo nmcli c delete \"static-eth0\"\n</code></pre></p> <p>Example: Add a new connection called <code>static-eth0</code> with IP <code>172.20.2.22/16</code> and gateway <code>172.20.2.100</code> on interface <code>eth0</code>:   <pre><code>sudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 172.20.2.22/16 gw4 172.20.2.100\n</code></pre></p> <p>Example: Add a persistent route so that multicast traffic to 224.x.x.x goes to the <code>static-eth0</code> connection: <pre><code>sudo nmcli con mod static-eth0 +ipv4.routes \"224.0.0.0/8\"\n</code></pre></p> <p>Example: Change the static-eth0 connection to remove static IP and enable DHCP. In this case, it would be clearer to delete the connection since it is named <code>static-eth0</code> and call it something else, but for edification: <pre><code>sudo nmcli con mod static-eth0 ipv4.address \"\"\nsudo nmcli con mod static-eth0 ipv4.gateway \"\"\nsudo nmcli con mod static-eth0 ipv4.method auto\nsudo nmcli con reload static-eth0\n</code></pre></p>"},{"location":"userguide/#connecting-to-the-fmu-via-the-usb-connector","title":"Connecting to the FMU via the USB connector","text":"<ol> <li>Attach a USB cable between the host computer and the FMU USB connector (J7).</li> <li>Start a Ground Control application on the host computer such as QGroundControl or Mission Planner.</li> </ol> <p>Info</p> <p>QGroundControl: Will automatically connect. Mission Planner: Select the appropriate COM port at the top right, 115200, then click CONNECT.</p>"},{"location":"userguide/#cellular-modem-installation","title":"Cellular Modem Installation","text":"<p>The EchoTherm system is compatible with Sierra Wireless M.2 3052 modems, such as the EM9191. Using other modems may not work without configuration changes due to the way other modems detect the presence of SIM cards and other critical functionality. </p> <p>When installing a cellular modem, care must be provided to also install the heat sink kit. This kit works by placing a thermal bad under the modem, which couples heat to a copper pour on the EchoTherm carrier board. On the top side of the EchoTherm carrier board, a heat sink is placed using thermal conductive epoxy. Failure to properly heat sink the Cellular modem may result in throttling, especially during data uploads (such as video streaming).</p>"}]}